name: WVS ü§ì GH Action üöß

on:
  pull_request:
  push:
    branches:
      - develop
      - release

jobs:
  build_test:
    name: üö¥ Build + Test üö¥  # Match the name below (8398a7/action-slack).
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout react-store
        uses: actions/checkout@v2
        with:
          repository: toggle-corp/react-store
          ref: wv-release-v2
          path: client/src/vendor/react-store

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Branch HEAD
        id: branch-head
        run: |
          BRANCH=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=branch::${BRANCH}

      - name: üê≥ Prepare Docker (Server)
        id: server-prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="docker.pkg.github.com/toggle-corp/worldvision-dvs/server"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}
          touch .env

      # - name: üê≥ Prepare Docker (Client)
      #   id: client-prep
      #   run: |
      #     TAG=$(echo $GITHUB_SHA | head -c7)
      #     IMAGE="docker.pkg.github.com/toggle-corp/worldvision-dvs/client"
      #     echo ::set-output name=tagged_image::${IMAGE}:${TAG}
      #     echo ::set-output name=tag::${TAG}

      - name: üê≥ Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: üê≥ Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-refs/develop
            ${{ runner.os }}-buildx-

      - name: üê≥ Build image (Server)
        uses: docker/build-push-action@v2
        with:
          context: ./server/
          builder: ${{ steps.buildx.outputs.name }}
          file: ./server/Dockerfile
          push: false # This would be set to true in a real world deployment scenario.
          load: true
          tags: ${{ steps.server-prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # - name: üê≥ Build image (Client)
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./client/
      #     builder: ${{ steps.buildx.outputs.name }}
      #     file: ./client/Dockerfile
      #     push: false # This would be set to true in a real world deployment scenario.
      #     load: true
      #     tags: ${{ steps.client-prep.outputs.tagged_image }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: üïÆ Validate if there are no pending django migrations.
        env:
          WV_BRANCH_NAME: ${{ steps.branch-head.outputs.branch }}
        run: |
          docker-compose run --rm server /code/scripts/wait-for-it.sh db:5432
          docker-compose run --rm server python3 manage.py makemigrations --check --dry-run || {
            echo 'There are some changes to be reflected in the migration. Make sure to run makemigrations';
            exit 1;
          }

      - name: ü§û Run Test üß™ & Publish coverage to code climate (server)
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_ID }}
          WV_BRANCH_NAME: ${{ steps.branch-head.outputs.branch }}
        with:
          workingDirectory: ./server/
          coverageCommand: docker-compose run --rm server /code/scripts/run_tests.sh
          coverageLocations: |
            ${{github.workspace}}/server/coverage.xml:coverage.py

      # - name: ü§û Run Test (client)
      #   run: |
      #     echo "REACT_APP_MAPBOX_ACCESS_TOKEN=${REACT_APP_MAPBOX_ACCESS_TOKEN}\nREACT_APP_MAPBOX_STYLE=${REACT_APP_MAPBOX_STYLE}" >> .env
      #     docker-compose run --rm client bash -c 'rsync -a --stats --ignore-existing /node_modules /code/ && yarn install && CI=false yarn build'
      #   env:
      #     WV_BRANCH_NAME: ${{ steps.branch-head.outputs.branch }}
      #     REACT_APP_MAPBOX_ACCESS_TOKEN: 'pk.eyJ1IjoiYWRpdHlha2hhdHJpIiwiYSI6ImNqbHh0eHRnZzAzN3YzdnBpeWtua3l0dHIifQ.YVzzJ9GDQKAXtW3MyqnfSQ'
      #     REACT_APP_MAPBOX_STYLE: 'mapbox://styles/deepmapz/cjc8oth8775tu2sr0eeymm3qv'

      - name: ü§û Push images after succes
        if: github.event_name == 'push'
        run: docker-compose push
        env:
          WV_BRANCH_NAME: ${{ steps.branch-head.outputs.branch }}

      - name: Deploy coverage to GH Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@4.1.4
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        with:
          branch: gh-pages
          folder: ./server/htmlcov

        # Temp fix
        # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: üê≥ Move docker cache (üßô Hack fix)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
